<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd" default-autowire="byName">
        
    <!--id 获取对象的标识 class 获取哪个类的对象  -->
	<!-- <bean id="peo" class="zfy.pojo.People">
	使用有参构造器，需补全bean标签 
	ref 引用另外一个bean value 基本数据类型或String等
	<constructor-arg index="0" value="1"></constructor-arg>
	<constructor-arg index="1" value="张三"></constructor-arg>
	<constructor-arg index="2" value="23"></constructor-arg>
	</bean> -->
	
	<!-- 通过实例工厂，创建对象 -->
	<!-- <bean id="peofac" class="zfy.pojo.PeopleFactory"></bean>
	<bean id="peof" factory-bean="peofac" factory-method="newInstance"></bean> -->
	<!-- 通过静态工厂，创建对象 -->
	<!-- <bean id="peos" class="zfy.pojo.PeopleFactoryS" factory-method="newInstance"></bean> -->
	
	<!-- 给bean标签赋值 -->
	<!-- <bean id="peo" class="zfy.pojo.People">
		<property name="id" value="2"></property>
		<property name="name">
			<value>刘婷</value>
		</property>
		<property name="age">
			<value>18</value>
		</property>
		<property name="comp" ref="com"></property>
	</bean>
	<bean id="com" class="zfy.pojo.Computer">
		<property name="band">
			<value>Dell</value>
		</property>
		<property name="price">
			<value>2000</value>
		</property>
	</bean> -->
	
	<!--数据源封装类，数据源 获取数据库连接 sprig-jdbc.jar包中  -->
		<!--返回值就是一个DriverManagerDataSource -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/ssm"></property>
		<property name="username" value="root"></property>
		<property name="password" value="123456"></property>
	</bean>
	创建SqlSessionFactory对象
	<bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
		数据源信息来源于dataSource
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	配置扫描器，相当于mybatis.xml中mappers下的package标签,扫描包的对应接口创建对象 
	如果bean不需要被引用，可以不设置id
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		要扫描的包
		<property name="basePackage" value="zfy.mapper"></property>
		和factory产生关系 
		<property name="sqlSessionFactory" ref="factory"></property>
	</bean>
	由spring管理service实现类；配置service实现类标签 配置类里面的全局属性 通过DI 
	spring要给一个属性注入，这个属性所在类必须被spring管理
	class一定是实现类，是可以new的 
	<bean id="workerService" class="zfy.service.impl.WorkerServiceImpl">
		<property name="workerMapper" ref="workerMapper"></property>
	</bean> -->
	
	<!-- 自动注入 -->
	<!-- <bean id="peo" class="zfy.pojo.People" autowire="byName"></bean>
	<bean id="comp" class="zfy.pojo.Computer"></bean> -->
	
	<!--通过属性文件和自动注入加载jdbc|取出属性文件的值  -->
	<!-- <context:property-placeholder location="classpath:second.properties,classpath:dp.properties"/>
	<context:component-scan base-package="zfy.demo"></context:component-scan>
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="typeAliasesPackage" value="zfy.pojo"></property>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="zfy.mapper"></property>
	</bean>
	<bean id="workerService" class="zfy.service.impl.WorkerServiceImpl">
	</bean>
	测试取properties属性文件中的值 
	<bean id="demo" class="zfy.demo.Demo"></bean> -->
	
	<!--测试scope属性 单例和多例  -->
	<!-- <bean id="worker" class="zfy.pojo.Worker" scope="prototype"></bean> -->
	
	<!-- 声明式事务  配置切点，配置声明式事务控制，配置JDBC，-->
	<aop:config>
		<!-- 配置切点范围尽可能大 -->
		<aop:pointcut expression="execution(* zfy.service.impl.*.*(..))" id="mypoint"/>
		<aop:advisor advice-ref="" pointcut-ref="mypoint"/>
	</aop:config>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- 具体需要进行事务管理的切点（方法）以ins开头的方法;常用配置-->
		<tx:attributes>
			<tx:method name="ins*"/>
			<tx:method name="upd*"/>
			<tx:method name="del*"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!--spring框架整合mybatis，配置文件  -->
	<!-- 数据源，配置jdbc的连接 -->
	<context:property-placeholder location="classpath:dp.properties"/>
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- 创建工厂 -->
	<bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="typeAliasesPackage" value="zfy.pojo"></property>
	</bean>
	<!-- 扫描特定包下的mapper文件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="zfy.mapper"></property>
	</bean>
	<!--  配置service类-->
	<bean id="workerService" class="zfy.service.impl.WorkerServiceImpl">
	</bean>
	
	
	
	
	
	
	
	
</beans>